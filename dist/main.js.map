{"version":3,"file":"main.js","sources":["../src/models/building.js","../src/main.js","../src/models/wmts.js","../src/models/elevation.js"],"sourcesContent":["\nexport function buildingLayer(serverURL, nameType, crs, zoomMinLayer, extent, view) {\n    const geometrySource = new itowns.WFSSource({\n        url: serverURL,\n        typeName: nameType,\n        crs: crs,\n        extent: extent\n    });\n\n    let ListMesh = {};\n\n    let listContaminer = {};\n\n\n\n    const geomLayer = new itowns.FeatureGeometryLayer('Buildings', {\n        source: geometrySource,\n        zoom: { min: zoomMinLayer },\n        style: new itowns.Style({\n            fill: {\n                color: setColor,\n                base_altitude: setAltitude,\n                extrusion_height: setExtrusion,\n            },\n\n        }),\n        onMeshCreated: function virusspread(mesh) {\n            mesh.children.forEach(c => {\n\n                let geoms = c.children[0].children[0].children[0].feature.geometries\n\n\n\n                let count = 0;\n                geoms.map(goem => {\n                    count++;\n\n                    let id = goem.properties.id;\n\n\n\n                    listContaminer[id] = goem.properties\n\n\n\n                    if ((count % 70) == 0) {\n                        // console.log(goem.properties);\n\n                        // mesh = addMeshToScene((goem.properties.bbox[0] + goem.properties.bbox[2]) / 2, (goem.properties.bbox[1] + goem.properties.bbox[3]) / 2, view);\n\n\n\n                        ListMesh[id] = {\n                            id: id,\n                            batiMesh: c.children[0].children[0].children[0],\n                            position: {\n                                x: (goem.properties.bbox[0] + goem.properties.bbox[2]) / 2,\n                                y: (goem.properties.bbox[1] + goem.properties.bbox[3]) / 2,\n                                z: goem.properties.z_min\n                            }\n                        };\n\n\n                        { {/*  console.log(mesh)  */ } }\n\n                    }\n\n\n                })\n\n\n\n            })\n\n\n        },\n    });\n\n    // Coloring the data\n    function setColor(properties) {\n        // console.log(properties)\n        // console.log(\"fsqfsqfsqfqfd\")\n        // console.log(Object.keys(ListMesh))\n        // console.log(Object.keys(ListMesh)[0])\n        // console.log(properties.id)\n        // console.log(ListMesh)\n        const id = properties.id;\n        let color = \"rgb(255, 255, 255)\";\n        let i = 0;\n        console.log(properties.id)\n        console.log(listContaminer)\n        console.log(Object.keys(listContaminer).includes(id))\n        // Object.keys(ListMesh).forEach(batid => {\n        //     i++;\n        // }\n        console.log(color)\n\n        return new itowns.THREE.Color(color)\n    }\n\n\n    // console.log(listCoords)\n\n    return { layer: geomLayer, coords: ListMesh, bat: listContaminer };\n}\n\n\n\n// Extruding the data \nfunction setExtrusion(properties) {\n    return properties.hauteur;\n}\n\n// Placing the data on the ground\nfunction setAltitude(properties) {\n    return properties.z_min - properties.hauteur;\n}\n\n\n/* Properties example:\n            geometry_name: \"the_geom\"\n            hauteur: 9\n            id: \"bati_indifferencie.19138409\"\n            origin_bat: \"Cadastre\"\n            prec_alti: 5\n            prec_plani: 2.5\n            z_max: 83.7\n            z_min: 83.7\n*/\n\n\nexport function addMeshToScene(x, y, z, view) {\n    // creation of the new mesh (a cylinder)\n    const THREE = itowns.THREE;\n    const geometry = new THREE.CylinderGeometry(0, 10, 60, 8);\n    const material = new THREE.MeshBasicMaterial({ color: 0xffc0cb });\n    const mesh = new THREE.Mesh(geometry, material);\n\n    // get the position on the globe, from the camera\n    const cameraTargetPosition = view.controls.getLookAtCoordinate();\n    // const cameraTargetPosition = new itowns.Coordinates('EPSG:4326', x, y, z *******\n    // position of the mesh\n    const meshCoord = cameraTargetPosition;\n    meshCoord.altitude += 30;\n\n    meshCoord.x = x;\n    meshCoord.y = y;\n\n    // position and orientation of the mesh\n    mesh.position.copy(meshCoord.as(view.referenceCrs)); // *****\n    // mesh.lookAt(new THREE.Vector3(0, 0, 0));\n    mesh.rotateX(Math.PI / 2);\n\n    // update coordinate of the mesh\n    mesh.updateMatrixWorld(); // *****\n\n    // add the mesh to the scene\n    view.scene.add(mesh);\n\n    // make the object usable from outside of the function\n    view.mesh = mesh;\n    view.notifyChange();\n\n    return mesh\n}\n","import { wmtsLayer } from \"./models/wmts\";\nimport { elevationLayer } from \"./models/elevation\";\nimport { buildingLayer, addMeshToScene } from \"./models/building\";\n\n// View\nconst viewerDiv = document.getElementById('viewerDiv');\n\nconst extent = {\n    west: 4.77244,\n    east: 4.87408,\n    south: 45.71694,\n    north: 45.80481,\n}\n\nconst placement = {\n    coord: new itowns.Coordinates('EPSG:4326', 4.83518, 45.76130),\n    range: 3000,\n    tilt: 60,\n};\n\n\nlet view = new itowns.GlobeView(viewerDiv, placement);\n\n// WMTS Layer\nconst wmts_layer = wmtsLayer('http://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/wmts',\n    'EPSG:3857',\n    'ORTHOIMAGERY.ORTHOPHOTOS',\n    'PM',\n    'image/jpeg');\n\nview.addLayer(wmts_layer);\n\n// Elevation\nconst elevation_layer = elevationLayer('http://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/wmts',\n    'EPSG:4326',\n    'ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES',\n    'WGS84G',\n    'image/x-bil;bits=32');\n\nview.addLayer(elevation_layer);\n\nconst layerCoord = buildingLayer('http://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/wfs?',\n    'BDTOPO_BDD_WLD_WGS84G:bati_indifferencie',\n    'EPSG:4326',\n    14,\n    extent,\n    view);\n//  GeometryLayer\nconst geometry_layer = layerCoord.layer\nconst ListMesh = layerCoord.coords // List Mesh\nconst bat = layerCoord.bat // List Mesh\n\n\n\nconsole.log(\"test\");\nconsole.log(ListMesh);\nview.addLayer(geometry_layer);\n\n\nfunction updateAgent(ListMesh) {\n    Object.entries(ListMesh).forEach(function ([key, val]) {\n\n        if (val.mesh) {\n            const cameraTargetPosition = view.controls.getLookAtCoordinate();\n\n            // position of the mesh\n            const meshCoord = cameraTargetPosition;\n\n            val.mesh.position.x += 0.1;\n            val.mesh.position.y += 0.1;\n\n            val.position.x += 0.1;\n            val.position.y += 0.1;\n\n            // update coordinate of the mesh\n            val.mesh.updateMatrixWorld();\n\n\n            { {/*  view.camera.camera3D.position.x += 0.01;  */ } }\n        }\n\n\n\n    }\n\n    )\n}\n\n\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    console.log(Object.entries(ListMesh).length\n    )\n\n    // geometry_layer.style.fill.color = setColor2\n\n    Object.entries(ListMesh).forEach(function ([key, val]) {\n        ListMesh[key].batiMesh.material.color.set(\"rgb(255, 0, 0)\")\n        ListMesh[key].batiMesh.updateMatrixWorld()\n\n        // ListMesh[key].batiMesh.material.color.set(\"rgb(0, 128, 111)\");\n        // console.log(\"test2\")\n    })\n\n\n\n    updateAgent(ListMesh)\n    view.mainLoop.gfxEngine.renderer.render(view.scene, view.camera.camera3D)\n}\n\n\n// Listen for globe full initialisation event\nview.addEventListener(itowns.GLOBE_VIEW_EVENTS.GLOBE_INITIALIZED, function globeInitialized() {\n    // eslint-disable-next-line no-console\n    console.info('Globe initialized');\n\n    let mesh;\n    let i = 0;\n\n\n\n\n\n\n\n    // add mesh\n    Object.entries(ListMesh).forEach(function ([key, val]) {\n        mesh = addMeshToScene(val.position.x, val.position.y, val.position.z, view);\n        // console.log(mesh)\n        ListMesh[key].mesh = mesh;\n        i++;\n\n        // console.log(ListMesh[key].batiMesh.style.fill.color)\n\n\n\n        mesh.material.color.set(\"rgb(0, 255, 0)\");\n        console.log(ListMesh[key].batiMesh)\n\n\n        // ListMesh[key].batiMesh.material.color.set(\"rgb(0, 128, 111)\");\n        // console.log(\"test2\")\n    })\n\n\n    // animate()\n\n});\n\n\n\n","\nexport function wmtsLayer(serverURL, crs, name, tileMatrixSet, format) {\n    const colorSource = new itowns.WMTSSource({\n        url: serverURL,\n        crs: crs,\n        name: name,\n        tileMatrixSet: tileMatrixSet,\n        format: format,\n    });\n\n    const colorLayer = new itowns.ColorLayer('Ortho', {\n        source: colorSource,\n    });\n\n    return colorLayer;\n}","export function elevationLayer(serverURL, crs, name, tileMatrixSet, format) {\n    const elevationSource = new itowns.WMTSSource({\n        url: serverURL,\n        crs: crs,\n        name: name,\n        tileMatrixSet: tileMatrixSet,\n        format: format,\n        tileMatrixSetLimits: {\n            11: {\n                minTileRow: 442,\n                maxTileRow: 1267,\n                minTileCol: 1344,\n                maxTileCol: 2683\n            },\n            12: {\n                minTileRow: 885,\n                maxTileRow: 2343,\n                minTileCol: 3978,\n                maxTileCol: 5126\n            },\n            13: {\n                minTileRow: 1770,\n                maxTileRow: 4687,\n                minTileCol: 7957,\n                maxTileCol: 10253\n            },\n            14: {\n                minTileRow: 3540,\n                maxTileRow: 9375,\n                minTileCol: 15914,\n                maxTileCol: 20507\n            }\n        },\n    });\n\n    const eleLayer = new itowns.ElevationLayer('MNT_WORLD', {\n        source: elevationSource,\n    });\n\n    return eleLayer;\n}"],"names":["setExtrusion","properties","hauteur","setAltitude","z_min","viewerDiv","document","getElementById","placement","coord","itowns","Coordinates","range","tilt","view","GlobeView","wmts_layer","serverURL","crs","name","tileMatrixSet","format","colorSource","WMTSSource","url","ColorLayer","source","wmtsLayer","addLayer","elevation_layer","elevationSource","tileMatrixSetLimits","minTileRow","maxTileRow","minTileCol","maxTileCol","ElevationLayer","elevationLayer","layerCoord","nameType","zoomMinLayer","extent","geometrySource","WFSSource","typeName","ListMesh","listContaminer","layer","FeatureGeometryLayer","zoom","min","style","Style","fill","color","id","console","log","Object","keys","includes","THREE","Color","base_altitude","extrusion_height","onMeshCreated","mesh","children","forEach","c","geoms","feature","geometries","count","map","goem","batiMesh","position","x","bbox","y","z","coords","bat","buildingLayer","west","east","south","north","geometry_layer","addEventListener","GLOBE_VIEW_EVENTS","GLOBE_INITIALIZED","info","entries","key","val","geometry","CylinderGeometry","material","MeshBasicMaterial","Mesh","meshCoord","controls","getLookAtCoordinate","altitude","copy","as","referenceCrs","rotateX","Math","PI","updateMatrixWorld","scene","add","notifyChange","addMeshToScene","set"],"mappings":"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"}